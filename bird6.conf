# This is a minimal configuration file, which allows the bird daemon to start
# but will not cause anything else to happen.
#
# Please refer to the documentation in the bird-doc package or BIRD User's
# Guide on http://bird.network.cz/ for more information on configuring BIRD and
# adding routing protocols.

# Change this into your BIRD router ID. It's a world-wide unique identification
# of your router, usually one of router's IPv4 addresses.
router id 141.98.136.117;

# The Kernel protocol is not a real routing protocol. Instead of communicating
# with other routers in the network, it performs synchronization of BIRD's
# routing tables with the OS kernel.
protocol kernel {
	scan time 60;
	import none;
#	export all;   # Actually insert routes into the kernel routing table
}

filter import_kernel {
if ( net != ::/0 ) then {
   accept;
   }
reject;
}

# Turn on global debugging of all protocols
debug protocols off;

# This pseudo-protocol watches all interface up/down events.
protocol device {
  scan time 2;    # Scan interfaces every 2 seconds
}
define martians = [ 
					::/0,
				 0000::/8,      # loopback, unspecified, v4-mapped
                 0200::/7,      # Reserved by IETF [RFC4048]
                 2001::/32,     # Teredo prefix [RFC4380]
                 2001:db8::/32, # NON-ROUTABLE range to be used for documentation purpose [RFC3849]
                 2002::/16,     # 6to4 prefix [RFC3068]
                 3ffe::/16,     # used for the 6bone but was returned [RFC5156]
                 5f00::/8,      # used for the 6bone but was returned [RFC5156]
                 fc00::/7,      # Unique Local Unicast [RFC4193]
                 fe80::/10,     # Link Local Unicast [RFC4291]
                 fec0::/10,     # Reserved by IETF [RFC3879]
                 ff00::/8       # Multicast [RFC4291]
]; 
define mypfx = [ 
    2a0b:b86:f::/48
];
include "v6/filters.conf";
include "v6/upstream/*.conf";
include "v6/peers/*.conf";

filter reject_martians {
	
		if  net ~ martians then {
			reject;
		}
		accept;
}
filter reject_mypfx {
	
		if  net ~ mypfx then {
			reject;
		}
		accept;
}
filter accept_mypfx {
	
		if  net ~ mypfx then {
			accept;
		}
		reject;
}
protocol bgp iBGP
{
   local as 3280;
   source address fc00:0:1::2;
   import filter reject_martians;
   export all;
   neighbor fc00:0:1::1 as 3280;
	# rr client;
	next hop self;

}


protocol bgp iBGP_DUS
{
	local as 3280;
	source address fc00:13:1::1;
	import filter reject_martians;
	import filter reject_mypfx;
	export filter reject_mypfx;
	neighbor fc00:13:1::2 as 3280;
	# rr client;
	next hop self;

} 
